# Generated by Django 5.1.9 on 2025-09-16 12:39

import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('adl_collector_app_plugin', '0003_alter_manualobservationstationlinkobserver_user_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='manualobservationstationlink',
            name='schedule',
            field=wagtail.fields.StreamField([('fixed_local', 13), ('windowed_only', 18)], blank=True, block_lookup={0: ('wagtail.blocks.TimeBlock', (), {'help_text': 'Select a fixed slot time'}), 1: ('wagtail.blocks.ListBlock', (0,), {'default': ['06:00', '12:00', '18:00', '00:00'], 'help_text': 'Select one or more fixed slots', 'max_num': 24, 'min_num': 1}), 2: ('wagtail.blocks.IntegerBlock', (), {'default': 20, 'help_text': 'Minutes before the slot time to start observation'}), 3: ('wagtail.blocks.IntegerBlock', (), {'default': 20, 'help_text': 'Minutes after the slot time to end observation'}), 4: ('wagtail.blocks.IntegerBlock', (), {'default': 60, 'help_text': 'Grace period in minutes for late observations'}), 5: ('wagtail.blocks.IntegerBlock', (), {'default': 5, 'help_text': 'Rounding increment in minutes for scheduling'}), 6: ('wagtail.blocks.IntegerBlock', (), {'default': 2, 'help_text': 'Number of days to backfill missed observations'}), 7: ('wagtail.blocks.IntegerBlock', (), {'default': 2, 'help_text': 'Allow scheduling this many minutes into the future'}), 8: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('ACCEPT_WITH_LATE_FLAG', 'Accept with late flag'), ('REJECT', 'Reject')], 'help_text': 'Policy for handling missed observation windows'}), 9: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('REVISION_WITH_REASON', 'Create revision with reason'), ('REJECT', 'Reject')], 'help_text': 'Policy for handling duplicate observations'}), 10: ('wagtail.blocks.IntegerBlock', (), {'default': 1440, 'help_text': 'Lock the schedule after this many minutes'}), 11: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('RAIN_SINCE_PREV', 'Rain since previous observation')], 'help_text': 'Rule for calculating rain accumulation'}), 12: ('wagtail.blocks.TimeBlock', (), {'default': '06:00', 'help_text': 'Local time for daily rollover of accumulation observations'}), 13: ('wagtail.blocks.StructBlock', [[('slots', 1), ('window_before_mins', 2), ('window_after_mins', 3), ('grace_late_mins', 4), ('rounding_increment_mins', 5), ('backfill_days', 6), ('allow_future_mins', 7), ('cutoff_policy', 8), ('duplicate_policy', 9), ('lock_after_mins', 10), ('rain_accumulation_rule', 11), ('accumulation_obs_day_rollover_local_time', 12)]], {'label': 'Fixed Slots in Local Time'}), 14: ('wagtail.blocks.TimeBlock', (), {'default': '06:00', 'help_text': 'Start time of the observation window'}), 15: ('wagtail.blocks.TimeBlock', (), {'default': '18:00', 'help_text': 'End time of the observation window'}), 16: ('wagtail.blocks.IntegerBlock', (), {'default': 45, 'help_text': 'Grace period in minutes for late observations'}), 17: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('RAIN_SINCE_PREV', 'Rain since previous observation'), ('RAIN_24H_ENDING_SLOT', 'Rain in the 24 hours ending at the slot time')], 'help_text': 'Rule for calculating rain accumulation'}), 18: ('wagtail.blocks.StructBlock', [[('window_start', 14), ('window_end', 15), ('grace_late_mins', 16), ('rounding_increment_mins', 5), ('backfill_days', 6), ('allow_future_mins', 7), ('cutoff_policy', 8), ('duplicate_policy', 9), ('lock_after_mins', 10), ('rain_accumulation_rule', 17), ('accumulation_obs_day_rollover_local_time', 12)]], {'label': 'Windowed Only'})}, null=True, verbose_name='Schedule'),
        ),
        migrations.AddField(
            model_name='manualobservationstationlinkvariablemapping',
            name='is_rainfall',
            field=models.BooleanField(default=False, verbose_name='Is Rainfall'),
        ),
    ]
